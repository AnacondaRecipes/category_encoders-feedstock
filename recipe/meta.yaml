{% set name = "category_encoders" %}
{% set version = "2.0.0" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: cc2fe178fe6b4dc6fbf4de6b9070151889255f6d1306ffc22e8de79e20c0c047

build:
  noarch: python
  number: 0
  script: "{{ PYTHON }} -m pip install --no-deps --ignore-installed -vvv ."

requirements:
  host:
    - python
    - pip
  run:
    - numpy >=1.11.3
    - pandas >=0.21.1
    - patsy >=0.4.1
    - python
    - scikit-learn >=0.20.0
    - scipy >=0.19.0
    - statsmodels >=0.6.1

test:
  requires:
    - nose
    - python
    - unittest2
    - cython
    - nose-exclude
  imports:
    - category_encoders
  commands:
    - >
      nosetests category_encoders ||
      nosetests category_encoders
      --exclude-test category_encoders.tests.test_encoders.TestEncoders.test_handle_missing_return_nan_test
      --exclude-test category_encoders.tests.test_encoders.TestEncoders.test_handle_missing_return_nan_train
      --exclude-test category_encoders.tests.test_cat_boost.TestBinaryEncoder.test_catBoost_missing
      --exclude-test category_encoders.tests.test_one_hot.TestOneHotEncoderTestCase.test_one_hot

about:
  home: https://github.com/scikit-learn-contrib/categorical_encoding
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE.md
  summary: A collection sklearn transformers to encode categorical variables as numeric
  doc_url: https://contrib.scikit-learn.org/categorical-encoding
  description: |-
    A set of scikit-learn-style transformers for encoding categorical variables
    into numeric with different techniques. While ordinal, one-hot, and hashing
    encoders have similar equivalents in the existing scikit-learn version, the
    transformers in this library all share a few useful properties:

    - First-class support for pandas dataframes as an input (and optionally as
      output)

    - Can explicitly configure which columns in the data are encoded by name or
      index, or infer non-numeric columns regardless of input type

    - Can drop any columns with very low variance based on training set
      optionally

    - Portability: train a transformer on data, pickle it, reuse it later and
      get the same thing out.

    - Full compatibility with sklearn pipelines, input an array-like dataset
      like any other transformer

extra:
  recipe-maintainers:
    - bollwyvl
    - nirajd
    - wdm0006
